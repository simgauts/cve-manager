import os
import click
import logging
from logging.handlers import SMTPHandler, RotatingFileHandler

from flask import Flask, request
from config import Config
from flask.cli import with_appcontext
from flask_sqlalchemy import SQLAlchemy
from flask_migrate import Migrate
from flask_login import LoginManager
from flask_bootstrap import Bootstrap
from flask_moment import Moment

db = SQLAlchemy()
migrate = Migrate()

login = LoginManager()

bootstrap = Bootstrap()
moment = Moment()

"""
from app import routes, models, errors

if not app.debug:
    if app.config['MAIL_SERVER']:
        auth = None
        if app.config['MAIL_USERNAME'] or app.config['MAIL_PASSWORD']:
            auth = (app.config['MAIL_USERNAME'], app.config['MAIL_PASSWORD'])
        secure = None
        if app.config['MAIL_USE_TLS']:
            secure = ()
        mail_handler = SMTPHandler(
            mailhost=(app.config['MAIL_SERVER'], app.config['MAIL_PORT']),
            fromaddr='no-reply@' + app.config['MAIL_SERVER'],
            toaddrs=app.config['ADMINS'], subject='Microblog Failure',
            credentials=auth, secure=secure)
        mail_handler.setLevel(logging.ERROR)
        app.logger.addHandler(mail_handler)

    if not os.path.exists('logs'):
        os.mkdir('logs')
    file_handler = RotatingFileHandler('logs/cve.log', maxBytes=10240,
                                       backupCount=10)
    file_handler.setFormatter(logging.Formatter(
        '%(asctime)s %(levelname)s: %(message)s [in %(pathname)s:%(lineno)d]'))
    file_handler.setLevel(logging.INFO)
    app.logger.addHandler(file_handler)

    app.logger.setLevel(logging.INFO)
    app.logger.info('CVE Manager startup')
"""

def create_app(config_class=Config):
    """
    Factory to create the application

    :param config_class: The current configuration
    """
    app = Flask(__name__)
    app.config.from_object(config_class)
    app.cli.add_command(stage_db)

    db.init_app(app)
    migrate.init_app(app, db)

    login.init_app(app)
    login.login_view = 'auth.login'

    bootstrap.init_app(app)
    moment.init_app(app)

    from app.views.auth import auth
    from app.views.home import home
    from app.views.user import user
    from app.views.cve import cve
    from app.views.product import product_bp
    app.register_blueprint(home)
    app.register_blueprint(auth)
    app.register_blueprint(user)
    app.register_blueprint(cve)
    app.register_blueprint(product_bp)

    from app.errors import not_found_error, internal_error
    app.register_error_handler(404, not_found_error)
    app.register_error_handler(500, internal_error)

    return app


@click.command(name="stage_db", short_help="Stage the database")
@with_appcontext
def stage_db():
    """
    A stage db command

    For now just an example for using a model from CLI without manager.
    """   
    from app.models.user import User

    user = User(username="unit_test", email="unit_test@test.com")
    user.set_password("unit_test_password")

    print(user)
    
    return user
    
