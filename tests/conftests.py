import os
import pytest
from app.models.user import User
from alembic.command import upgrade
from alembic.config import Config
from app import create_app
from app import db as _db
from config import TestConfig

basedir = os.path.abspath(os.path.dirname(__file__))

ALEMBIC_CONFIG = os.path.join(basedir, "../migrations/alembic.ini")

# This was taken from:
# http://alexmic.net/flask-sqlalchemy-pytest/

@pytest.fixture(scope="session")
def app(request):
    """
    Session-wide test Flask application.
    """
    app = create_app(TestConfig)

    # Establish an application context before running the tests.
    ctx = app.app_context()
    ctx.push()

    def teardown():
        ctx.pop()

    request.addfinalizer(teardown)
    return app


@pytest.fixture(scope="session")
def db(app, request):
    """
    Session-wide test database.
    """
    db_path = app.config["SQLALCHEMY_DATABASE_URI"]
    db_path = db_path[len("sqlite:///"):]
    print(db_path)
    if os.path.exists(db_path):
        os.unlink(db_path)

    def teardown():
        _db.drop_all()
        os.unlink(db_path)

    _db.app = app
    apply_migrations()

    request.addfinalizer(teardown)
    return _db


@pytest.fixture(scope="function")
def session(db, request):
    """
    Creates a new database session for a test.
    """
    connection = db.engine.connect()
    transaction = connection.begin()

    options = dict(bind=connection, binds={})
    session = db.create_scoped_session(options=options)

    db.session = session

    def teardown():
        transaction.rollback()
        connection.close()
        session.remove()

    request.addfinalizer(teardown)
    return session


def apply_migrations():
    """
    Applies all alembic migrations.
    """
    config = Config(ALEMBIC_CONFIG)
    config.set_main_option("script_location", "migrations")

    upgrade(config, 'head')


@pytest.fixture(scope="module")
def new_user():
    user = User(username="unit_test", email="unit_test@test.com")
    user.set_password("unit_test_password")
    return user
